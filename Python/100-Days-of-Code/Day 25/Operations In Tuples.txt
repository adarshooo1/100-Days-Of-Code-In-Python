In Python, you can perform the following operations on tuples:

Indexing: You can access individual elements of a tuple using indexes.
Slicing: You can create a new tuple by selecting a range of elements from an existing tuple.
Concatenation: You can join two or more tuples together to create a new tuple.
Repetition: You can create a new tuple by repeating an existing tuple a given number of times.
Membership: You can check if an element exists in a tuple.
Length: You can determine the number of elements in a tuple.
Comparison: You can compare two tuples to see if they are equal, or if one is greater than or less than the other.

///////////////code//////////////
Indexing:

# Indexing starts from 0
tuple = (1, 2, 3, 4, 5)
print(tuple[0])  # Output: 1
print(tuple[2])  # Output: 3
//////////////////////////////////

///////////////code///////////////
Slicing:

tuple = (1, 2, 3, 4, 5)
new_tuple = tuple[1:3]  # Output: (2, 3)
new_tuple = tuple[:3]   # Output: (1, 2, 3)
new_tuple = tuple[1:]   # Output: (2, 3, 4, 5)

///////////////code//////////////
Concatenation:

tuple1 = (1, 2, 3)
tuple2 = (4, 5, 6)
tuple3 = tuple1 + tuple2  # Output: (1, 2, 3, 4, 5, 6)

///////////////code//////////////
Repetition:

tuple = (1, 2)
new_tuple = tuple * 3  # Output: (1, 2, 1, 2, 1, 2)

///////////////code//////////////
Membership:

tuple = (1, 2, 3, 4, 5)
print(1 in tuple)  # Output: True
print(6 in tuple)  # Output: False

///////////////code//////////////
Length:

tuple = (1, 2, 3, 4, 5)
print(len(tuple))  # Output: 5

///////////////code//////////////
Comparison:

tuple1 = (1, 2, 3)
tuple2 = (1, 2, 3)
tuple3 = (1, 2, 4)

print(tuple1 == tuple2)  # Output: True
print(tuple1 == tuple3)  # Output: False
print(tuple1 < tuple3)   # Output: True
print(tuple1 > tuple3)   # Output: False