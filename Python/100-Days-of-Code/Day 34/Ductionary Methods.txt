In  Pyhton Sets are Unordered but the Dictionary in Python are ordered from version 3.7 ordered

Dictionaries in Python are implemented as hash tables, which provide fast access to values based on their keys. Dictionaries are mutable, meaning that their values can be changed after they are created.

Here are some common methods for working with dictionaries in Python:

d.clear(): Removes all items from the dictionary.
d.copy(): Returns a shallow copy of the dictionary.
d.fromkeys(seq[, v]): Returns a new dictionary with keys from seq and value equal to v (defaults to None).
d.get(key[, default]): Returns the value for key if key is in the dictionary, else default. If default is not given, it defaults to None.
d.items(): Returns a view object that displays a list of a given dictionary's (key, value) tuple pairs.
d.keys(): Returns a view object that displays a list of all the keys in the dictionary.
d.pop(key[, default]): Removes the item with key and returns its value or default if key is not found. If default is not given and key is not found, raises a KeyError.
d.popitem(): Removes and returns an arbitrary (key, value) pair as a 2-tuple.
d.update(other_dictionary): adds the key-value pairs from the other_dictionary to the current dictionary.
d.values(): Returns a view object that displays a list of all the values in the dictionary.
d[key] = value: Sets the value for key.
del d[key]: Removes the item with key key from the dictionary.

//////////////////////////////CODE//////////////////////////////
my_dict['d'] = 4 # Adding a new key-value pair
print(my_dict) # output : {'a': 1, 'b': 2, 'c': 3, 'd': 4}
my_dict['a'] = 10 # Updating an existing key-value pair
print(my_dict) # output : {'a': 10, 'b': 2, 'c': 3, 'd': 4}
del my_dict['b'] # Deleting an existing key-value pair
print(my_dict) # output : {'a': 10, 'c': 3, 'd': 4}
////////////////////////////////////////////////////////////////