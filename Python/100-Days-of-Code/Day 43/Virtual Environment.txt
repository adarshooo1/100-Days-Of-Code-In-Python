A virtual environment in Python is a way to create a isolated environment for a specific project or application,
where you can install and manage the dependencies and packages that are specific to that project.
This allows you to have a specific version of a package or library for one project without affecting
other projects on the same system.

There are different tools available to create virtual environments in Python, such as virtualenv, venv, and conda.

virtualenv is a third-party Python package that you can install using pip. Once you have it installed,
you can create a new virtual environment using the command virtualenv envname, where envname is the name
of your virtual environment. To activate the virtual environment, you use the command source envname/bin/activate
on Linux or macOS, or envname\Scripts\activate on Windows.

venv is a built-in module in Python 3.3 or later, you can create a virtual environment using the command
python3 -m venv envname where envname is the name of your virtual environment. 
//////////////////////////////////////////////////////////////////
To activate the virtual environment,
you use the command source envname/bin/activate on Linux or macOS,
or envname\Scripts\activate on Windows
///////////////////////////////////////////////////////////////////

conda is another open-source package and environment management system,
it is used primarily for data science and machine learning workflows.
It is particularly useful for managing environments with multiple versions of Python and R.
You can create a new virtual environment using the command conda create --name envname,
where envname is the name of your virtual environment. To activate the virtual environment,
you use the command conda activate envname

Once you have your virtual environment set up and activated, you can install packages and dependencies
using pip or conda as you would normally, and they will be installed in the virtual environment,
rather than in the global Python environment.

You can deactivate the virtual environment by using the command deactivate


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Create a folder.
Step1:- Open  or create a new folder(Example:- Python) with shift+rightc click in Windows Powershell (If new to Learn Virtual environment else any code Editor)

:-After Getting into it (Step 2)


//Virtual Environment Installation :- For making New Virtual Environment.
Step2:-cmd:-pip install virtualenv (Able to create a New environments anywhere) Code Example:-PS C:\Users\Adarsh Singh\Desktop\Python\100-Days-of-Code\Day 43\NewVenv> pip install virtualenv
                ''''''''''''''''''//Now Virtual Environment is Installed and able to use.


//Create a Virtual Environment Directory.
Step3:- cmd:-virtualenv Virtual Environment name (Example:- virtualenv MyEnvironment1) to create a Environment but a isolated envorinment which is cloning global 
                       '''''''''''''''''''''''''''python in the MyEnvironment1
                       

  It is Created But not activated Yet. So we have to activate it


//To Activate Virtual Environment
Step 4:-cmd:- MyEnvironment1\Scripts\activate (Now it is activate.But How to check? So,[(MyEnvironment1) PS C:\Users\Adarsh Singh\Desktop\Python\100-Days-of-Code\Day 43\NewVenv>] Comes before the Path which means activated.                              '''''''''''''''''
                                                                                       
  Sometime it can be possible that it will show some error then click on the Windows icon open (Terminal(Admin)) and locate the path Get into the folder and in cmd:-set-executionpolicy then Y:yes


//To Access Python Version inside the activated Environment
Step 5:-cmd:-Python //It will tell the python version But Isolated 
     Now we get into the python
     >>> Import pandas
         Traceback (most recent call last):
         File "<stdin>", line 1, in <module>
         ModuleNotFoundError: No module named 'pandas'
         (Throwing Error that pandas is not installed but it is globally installed)
         Because it is Virtual Environment so we have to install as per the need of the programmer and the versions.
         >>> exit()

//pip modules Installation
Step 6:- cmd:-(MyEnvironment1) PS C:\Users\Adarsh Singh\Desktop\Python\100-Days-of-Code\Day 43\NewVenv> pip install pandas  // To install pandas  // pip uninstall pandas:- to uninstall pandas                                                                           ''''''''''''''''''''
        Download some pip module                                                                       
        (MyEnvironment1) PS C:\Users\Adarsh Singh\Desktop\Python\100-Days-of-Code\Day 43\NewVenv> pip install scikit-learn
        (MyEnvironment1) PS C:\Users\Adarsh Singh\Desktop\Python\100-Days-of-Code\Day 43\NewVenv> pip install numpy
        (MyEnvironment1) PS C:\Users\Adarsh Singh\Desktop\Python\100-Days-of-Code\Day 43\NewVenv> pip install sklearn
        (MyEnvironment1) PS C:\Users\Adarsh Singh\Desktop\Python\100-Days-of-Code\Day 43\NewVenv> pip install Pytorch
                                                                                                '''''''''''''''''''''''''''' Like this way we can Download any module
        After Downloading module check once that module installed or not,

        (MyEnvironment1) PS C:\Users\Adarsh Singh\Desktop\Python\100-Days-of-Code\Day 43\NewVenv> python
        Python 3.11.0 (main, Oct 24 2022, 18:26:48) [MSC v.1933 64 bit (AMD64)] on win32
        Type "help", "copyright", "credits" or "license" for more information.
        >>> import pandas  (To check) if It jumps without error in the next line means Downloaded
        >>> import sklearn (To check) if It jumps without error in the next line means Downloaded
        >>>

        To check Modules list :- cmd:-(MyEnvironment1) PS C:\Users\Adarsh Singh\Desktop\Python\100-Days-of-Code\Day 43\NewVenv> pip list (To check the pip modules list)
        
        Note:- Sometime it will shows that sklearn no module so before download sklearn download pip install scikit-learn (Problem solved) of import sklearn


//Requiment.txt >> Which will create a requirement file with versions.
Step 7:- (MyEnvironment1) PS C:\Users\Adarsh Singh\Desktop\Python\100-Days-of-Code\Day 43\NewVenv> pip freeze > requirement.txt  (If By chance we created a wrong file name then we can change like this:- cmd:- mv "oldfile.txt" "newfile.txt")
    This will create a requirement file which will tell the versions of the modules installed in the PC.
    Example:-
           joblib==1.2.0
           numpy==1.24.1
           pandas==1.5.2
           python-dateutil==2.8.2
           pytz==2022.7
           scikit-learn==1.2.0
           scipy==1.10.0
           six==1.16.0
           sklearn==0.0.post1
           threadpoolctl==3.1.0
        To Import modules cmd:-pip install pandas==1.5.2 >>Which will download the needed version as per the requiremet.txt file.

        If there are so many modules then how to install in bulk
        cmd:-pip install -r .\requirement.txt


//To Deactivate the Virtual Environment
Step 8:-cmd:-(MyEnvironment1) PS C:\Users\Adarsh Singh\Desktop\Python\100-Days-of-Code\Day 43\NewVenv> deactivate

--------------------------------------------------------------------------------------------------------------------------------------------------

If We want that Create a Virtual Environment Which copy System Interpretator site Packages (copy globally Installed site packages)

virtualenv --system-site-packages MyEnvironment2
//It will create a New Directory but having all modules installed that have in the Global Computer.
//After that we can perform all the operations listed below.

-------------------------------------------------------------------------------------------------------------
‚ù§Ô∏èHava a Good Dayüëã
